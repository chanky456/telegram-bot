from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def start(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    first_name = user.first_name if user.first_name else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    welcome_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n"
        "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç. –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—è –∫–æ–Ω—Ç–µ–Ω—Ç.\n\n"
        "üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
    keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å üî•", callback_data="start_action")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    update.message.reply_text(welcome_message, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å üî•"
def start_action(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω
    query.edit_message_text("üöÄ –û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º. –î–∞–≤–∞–π—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏–º!")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    updater = Updater("–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê")  # –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    dispatcher = updater.dispatcher

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(start_action, pattern="^start_action$"))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
